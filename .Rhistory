set.seed(1)
rpois(5, 2)
set.seed(1)
set.seed(1)
rpois(5, 2)
?ppois
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(x, y)
?system.time
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
x <- matrix(2, 3, 1)
View(x)
solve(x)
x <- matrix(2, 3, 3)
solve(x)
makeCacheMatrix <- function(x = matrix()) {
inv_m <- NULL
set <- function(y) {
x <<- y
inv_m <<- NULL
}
get <- function() {
x }
setinverse <- function(inversematrix) {
inv_m <<- inversematrix
}
getinverse <- function() {
inv_m
}
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
libarary(XML)
library(XML)
url <- "http://biostat.jhsph.edu/~jleek/contact.html"
html <- htmlTreeParse(url, useInternalNodes=TRUE)
head(html)
con <- url(http://biostat.jhsph.edu/~jleek/contact.html")
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode <- readLined(con)
htmlCode <- readLines(con)
close(con)
head(htmlCode)
htmlCode[10, 20, 30, 100]
htmlCode[10]
y <- c(10, 20, 30, 100)
htmlCode[y]
length(htmlCode[y])
length(htmlCode[y][1])
lapply(htmlCode[y], nchar)
con <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
data <- readLines(con)
close(con)
head(data)
nchar(data[4])
substr(data[4], 20, 23)
substr(data[5], 20, 23)
substr(data[5], 16, 19)
substr(data, 16, 19)[1:4]
substr(data, 16, 19)[6:9]
subdata <- substr(data, 16, 19)
subdata <- as.numeric(substr(data, 16, 19))
subdata <- as.numeric(substr(data, 16, 19))[5:]
subdata <- as.numeric(substr(data, 16, 19))[5:1258]
sum(subdata)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "6b874ef05355717e4ac2", "2fa8e11df86654b8e2e423a06339cf0db7bfde21")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages(httpuv)
install.packages("httpuv")
library(httpuv)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
content(req)
str(req)
req[1]
req[2]
req[3]
req[4]
req[5]
req[6]
req[7]
req[8]
req[9]
content(req)[1]
library(jsonlite)
jsonData <- fromJSON(req)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
names(jsonData$created_at)
names(jsonData$owner)
names(jsonData$created_at)
names(jsonData$updated_at)
stop_for_status(req)
data <- content(req)
list(data[[4]]$name, data[[4]]$created_at)
list(data[[1]]$name, data[[1]]$created_at)
list(data[[2]]$name, data[[2]]$created_at)
list(data$name)
list(data[[3]]$name, data[[3]]$created_at)
list(data[[5]]$name, data[[5]]$created_at)
con <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
data <- readLines(con)
close(con)
head(data)
substrig(data, 16, 19)[2:10]
substring(data, 16, 19)[2:10]
substring(data, 16, 19)[28:32]
substring(data, 28, 32)[2:10]
substring(data, 29, 32)[2:10]
subdata <- to.numeric(substring(data, 29, 32)[5:1258])
subdata <- as.numeric(substring(data, 29, 32)[5:1258])
sum(subdata)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(1:3))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran,country == "US" | country == "IN")
filter(cran, size>100500 , r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, is.na(r_version)=FALSE)
filter(cran, is.na(r_version) == FALSE)
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package,size )
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count,probs = 0.99)
top_counts<- filter(pack_sum, count>679)
top_counts
head(top_counts, 20)
arrange(top_counts, desc(count))
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique>465)
top_unique
arrange(top_unique, desc(unique))
submit()
submit()
submit()
cran %>%
select(ip_id, country, package, size) %>%
print
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, - grade)
res
?separate
separate(data = res, col = sex_class, into = c("sex", "class"))
submit()
students3
?gather
submit()
?spread
submit()
submit()
?gather
?spread
submit()
submit()
extract_numeric("class5")
?mutate
submit()
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
rbind_list(passed, failed)
sat
?separate
submit()
?contains
?select
submit()
submit()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
head(Diet)
head(BodyWeight)
l <- "US |84065|2633 w 12820 s|#|Riverton|UT"
s <- strsplit(l, "[^[:digit:]]")
s
solution <- as.numeric(unlist(s))
solution <- solution[!is.na(solution)]
solution
l <- c("US |84065|12237 S 3900 W|#|Riverton|UT", "US |84065|12495 S 3240 W|#|Riverton|UT")
s <- strsplit(l, "[^[:digit:]]")
solution <- as.numeric(unlist(s))
solution <- solution[!is.na(solution)]
solution
l <- c("US |84065|12237 S 3900 W|#|Riverton|UT", "US |84065|12495 S 3240 W|#|Riverton|UT")
s <- strsplit(l, "[^[:digit:]]")
solution <- as.numeric(unlist(s))
solution <- solution[!is.na(solution)]
solution
l <- c("US |84065|12237 S 3900 W|#|Riverton|UT", "US |84065|12495 S 3240 W|#|Riverton|UT")
s <- strsplit(l, "[^[:digit:]]")
solution <- as.numeric(s)
solution <- solution[!is.na(solution)]
solution
s
solution <- as.numeric(s)
solution <- as.numeric(unlist(s))
solution
v <- vector(length(l))
?vector
v <- vector(length=2)
v <- vector(length=length(l))
v
v <- vector(length=length(l))
for (i in 1:length(l)) {
s <- strsplit(l[i], "[^[:digit:]]")
solution <- as.numeric(unlist(s))
solution <- solution[!is.na(solution)]
v[i] <- solution
}
s
v <- vector(length=length(l))
s <- strsplit(l[1], "[^[:digit:]]")
s
solution <- as.numeric(unlist(s))
solution <- solution[!is.na(solution)]
solution
v[1] <- solution
v[1] <- as.vector(solution)
v[1] <- as.list(solution)
v <- vector(length=length(l), mode="any")
?list
?data.frame
str(l)
l[1]
f <- function(m) {
dt <- matrix(1, ncol=length(m), nrow=length(m))
for (i in 1:length(m)) {
for (j in 1:length(m)) {
s <- strsplit(m[i], "[^[:digit:]]")
l <- strsplit(m[j], "[^[:digit:]]")
sol1 <- as.numeric(unlist(s))
sol2 <- as.numeric(unlist(l))
sol1 <- sol1[!is.na(sol1)]
sol2 <- sol2[!is.na(sol2)]
dt[i, j] <- (sol1==sol2)
}
}
dt
}
f(l)
(sol1 == sol2)
f <- function(m) {
dt <- matrix(1, ncol=length(m), nrow=length(m))
for (i in 1:length(m)) {
for (j in 1:length(m)) {
s <- strsplit(m[i], "[^[:digit:]]")
l <- strsplit(m[j], "[^[:digit:]]")
sol1 <- as.numeric(unlist(s))
sol2 <- as.numeric(unlist(l))
sol1 <- sol1[!is.na(sol1)]
sol2 <- sol2[!is.na(sol2)]
sol1
}
}
dt
}
setwd("C:/Users/nmiron/RepData_PeerAssessment1")
unzip("activity.zip")
data <- read.csv("activity.csv")
View(data)
str(data)
per_day <- group_by(data, date)
steps_per_day <- summariZe(per_day, sum(steps))
colnames(steps_per_day) <- c("date", "total_steps")
plot(steps_per_day$date, steps_per_day$total_steps, type ="l", main="Total steps per day", ylab="Total steps", xlab="Date")
library(dplyr)
per_day <- group_by(data, date)
steps_per_day <- summariZe(per_day, sum(steps))
colnames(steps_per_day) <- c("date", "total_steps")
plot(steps_per_day$date, steps_per_day$total_steps, type ="l", main="Total steps per day", ylab="Total steps", xlab="Date")
steps_per_day <- summarize(per_day, sum(steps))
colnames(steps_per_day) <- c("date", "total_steps")
plot(steps_per_day$date, steps_per_day$total_steps, type ="l", main="Total steps per day", ylab="Total steps", xlab="Date")
barplot(steps_per_day$total_steps,steps_per_day$date, main="Total PM2.5 Emissions",
ylab="PM2.5 Emissions (tons)", xlab="Year")
summary(steps_per_day)
